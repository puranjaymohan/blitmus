// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
#include <linux/bpf.h>
#include <bpf/bpf_helpers.h>

char LICENSE[] SEC("license") = "Dual BSD/GPL";

volatile __u64 flag[1000] = {0};

#define READ_ONCE(x) (*(volatile typeof(x) *)&(x))

#define WRITE_ONCE(x, val) ((*(volatile typeof(x) *)&(x)) = (val))

#define smp_mb()						\
        ({							\
                volatile __u64 __val = 1;			\
		__val = __sync_fetch_and_add(&__val, 10);	\
        })

#define smp_load_acquire(p)					\
	({							\
		typeof(*p) __val;				\
		__atomic_load(p, &__val, __ATOMIC_ACQUIRE);	\
		__val;						\
	})

#define smp_store_release(p, v)					\
	({							\
		typeof(*p) __val = (v);				\
		__atomic_store(p, &__val, __ATOMIC_RELEASE);	\
	})

int barrier_wait(unsigned int id, unsigned int i)
{
	if (i >= 1000)
		return 0;

	if ((i % 2) == id) {
		WRITE_ONCE(flag[i], 1);
		smp_mb();
	} else {
		#pragma unroll
		for (int ii=0; ii<256; ii++) {
			if (READ_ONCE(flag[i]) != 0) return 0;
		}
	}
	return 0;
}
